/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rocky.dida.common.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-3-8")
public class ApplyExecuteJobForm implements org.apache.thrift.TBase<ApplyExecuteJobForm, ApplyExecuteJobForm._Fields>, java.io.Serializable, Cloneable, Comparable<ApplyExecuteJobForm> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplyExecuteJobForm");

  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CRON_FIELD_DESC = new org.apache.thrift.protocol.TField("cron", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SCHEDULE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduleTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TRIGGER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField APPLICANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicantId", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ApplyExecuteJobFormStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ApplyExecuteJobFormTupleSchemeFactory());
  }

  public String group; // required
  public String name; // required
  public String cron; // required
  public long scheduleTime; // required
  public long triggerTime; // required
  public String applicantId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP((short)1, "group"),
    NAME((short)2, "name"),
    CRON((short)3, "cron"),
    SCHEDULE_TIME((short)4, "scheduleTime"),
    TRIGGER_TIME((short)5, "triggerTime"),
    APPLICANT_ID((short)6, "applicantId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP
          return GROUP;
        case 2: // NAME
          return NAME;
        case 3: // CRON
          return CRON;
        case 4: // SCHEDULE_TIME
          return SCHEDULE_TIME;
        case 5: // TRIGGER_TIME
          return TRIGGER_TIME;
        case 6: // APPLICANT_ID
          return APPLICANT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCHEDULETIME_ISSET_ID = 0;
  private static final int __TRIGGERTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CRON, new org.apache.thrift.meta_data.FieldMetaData("cron", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHEDULE_TIME, new org.apache.thrift.meta_data.FieldMetaData("scheduleTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRIGGER_TIME, new org.apache.thrift.meta_data.FieldMetaData("triggerTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APPLICANT_ID, new org.apache.thrift.meta_data.FieldMetaData("applicantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplyExecuteJobForm.class, metaDataMap);
  }

  public ApplyExecuteJobForm() {
  }

  public ApplyExecuteJobForm(
    String group,
    String name,
    String cron,
    long scheduleTime,
    long triggerTime,
    String applicantId)
  {
    this();
    this.group = group;
    this.name = name;
    this.cron = cron;
    this.scheduleTime = scheduleTime;
    setScheduleTimeIsSet(true);
    this.triggerTime = triggerTime;
    setTriggerTimeIsSet(true);
    this.applicantId = applicantId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApplyExecuteJobForm(ApplyExecuteJobForm other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCron()) {
      this.cron = other.cron;
    }
    this.scheduleTime = other.scheduleTime;
    this.triggerTime = other.triggerTime;
    if (other.isSetApplicantId()) {
      this.applicantId = other.applicantId;
    }
  }

  public ApplyExecuteJobForm deepCopy() {
    return new ApplyExecuteJobForm(this);
  }

  @Override
  public void clear() {
    this.group = null;
    this.name = null;
    this.cron = null;
    setScheduleTimeIsSet(false);
    this.scheduleTime = 0;
    setTriggerTimeIsSet(false);
    this.triggerTime = 0;
    this.applicantId = null;
  }

  public String getGroup() {
    return this.group;
  }

  public ApplyExecuteJobForm setGroup(String group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public ApplyExecuteJobForm setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getCron() {
    return this.cron;
  }

  public ApplyExecuteJobForm setCron(String cron) {
    this.cron = cron;
    return this;
  }

  public void unsetCron() {
    this.cron = null;
  }

  /** Returns true if field cron is set (has been assigned a value) and false otherwise */
  public boolean isSetCron() {
    return this.cron != null;
  }

  public void setCronIsSet(boolean value) {
    if (!value) {
      this.cron = null;
    }
  }

  public long getScheduleTime() {
    return this.scheduleTime;
  }

  public ApplyExecuteJobForm setScheduleTime(long scheduleTime) {
    this.scheduleTime = scheduleTime;
    setScheduleTimeIsSet(true);
    return this;
  }

  public void unsetScheduleTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEDULETIME_ISSET_ID);
  }

  /** Returns true if field scheduleTime is set (has been assigned a value) and false otherwise */
  public boolean isSetScheduleTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEDULETIME_ISSET_ID);
  }

  public void setScheduleTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEDULETIME_ISSET_ID, value);
  }

  public long getTriggerTime() {
    return this.triggerTime;
  }

  public ApplyExecuteJobForm setTriggerTime(long triggerTime) {
    this.triggerTime = triggerTime;
    setTriggerTimeIsSet(true);
    return this;
  }

  public void unsetTriggerTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRIGGERTIME_ISSET_ID);
  }

  /** Returns true if field triggerTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggerTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TRIGGERTIME_ISSET_ID);
  }

  public void setTriggerTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRIGGERTIME_ISSET_ID, value);
  }

  public String getApplicantId() {
    return this.applicantId;
  }

  public ApplyExecuteJobForm setApplicantId(String applicantId) {
    this.applicantId = applicantId;
    return this;
  }

  public void unsetApplicantId() {
    this.applicantId = null;
  }

  /** Returns true if field applicantId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicantId() {
    return this.applicantId != null;
  }

  public void setApplicantIdIsSet(boolean value) {
    if (!value) {
      this.applicantId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CRON:
      if (value == null) {
        unsetCron();
      } else {
        setCron((String)value);
      }
      break;

    case SCHEDULE_TIME:
      if (value == null) {
        unsetScheduleTime();
      } else {
        setScheduleTime((Long)value);
      }
      break;

    case TRIGGER_TIME:
      if (value == null) {
        unsetTriggerTime();
      } else {
        setTriggerTime((Long)value);
      }
      break;

    case APPLICANT_ID:
      if (value == null) {
        unsetApplicantId();
      } else {
        setApplicantId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP:
      return getGroup();

    case NAME:
      return getName();

    case CRON:
      return getCron();

    case SCHEDULE_TIME:
      return Long.valueOf(getScheduleTime());

    case TRIGGER_TIME:
      return Long.valueOf(getTriggerTime());

    case APPLICANT_ID:
      return getApplicantId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUP:
      return isSetGroup();
    case NAME:
      return isSetName();
    case CRON:
      return isSetCron();
    case SCHEDULE_TIME:
      return isSetScheduleTime();
    case TRIGGER_TIME:
      return isSetTriggerTime();
    case APPLICANT_ID:
      return isSetApplicantId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApplyExecuteJobForm)
      return this.equals((ApplyExecuteJobForm)that);
    return false;
  }

  public boolean equals(ApplyExecuteJobForm that) {
    if (that == null)
      return false;

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_cron = true && this.isSetCron();
    boolean that_present_cron = true && that.isSetCron();
    if (this_present_cron || that_present_cron) {
      if (!(this_present_cron && that_present_cron))
        return false;
      if (!this.cron.equals(that.cron))
        return false;
    }

    boolean this_present_scheduleTime = true;
    boolean that_present_scheduleTime = true;
    if (this_present_scheduleTime || that_present_scheduleTime) {
      if (!(this_present_scheduleTime && that_present_scheduleTime))
        return false;
      if (this.scheduleTime != that.scheduleTime)
        return false;
    }

    boolean this_present_triggerTime = true;
    boolean that_present_triggerTime = true;
    if (this_present_triggerTime || that_present_triggerTime) {
      if (!(this_present_triggerTime && that_present_triggerTime))
        return false;
      if (this.triggerTime != that.triggerTime)
        return false;
    }

    boolean this_present_applicantId = true && this.isSetApplicantId();
    boolean that_present_applicantId = true && that.isSetApplicantId();
    if (this_present_applicantId || that_present_applicantId) {
      if (!(this_present_applicantId && that_present_applicantId))
        return false;
      if (!this.applicantId.equals(that.applicantId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_group = true && (isSetGroup());
    list.add(present_group);
    if (present_group)
      list.add(group);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_cron = true && (isSetCron());
    list.add(present_cron);
    if (present_cron)
      list.add(cron);

    boolean present_scheduleTime = true;
    list.add(present_scheduleTime);
    if (present_scheduleTime)
      list.add(scheduleTime);

    boolean present_triggerTime = true;
    list.add(present_triggerTime);
    if (present_triggerTime)
      list.add(triggerTime);

    boolean present_applicantId = true && (isSetApplicantId());
    list.add(present_applicantId);
    if (present_applicantId)
      list.add(applicantId);

    return list.hashCode();
  }

  @Override
  public int compareTo(ApplyExecuteJobForm other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCron()).compareTo(other.isSetCron());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCron()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cron, other.cron);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScheduleTime()).compareTo(other.isSetScheduleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScheduleTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduleTime, other.scheduleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriggerTime()).compareTo(other.isSetTriggerTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggerTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerTime, other.triggerTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicantId()).compareTo(other.isSetApplicantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicantId, other.applicantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ApplyExecuteJobForm(");
    boolean first = true;

    sb.append("group:");
    if (this.group == null) {
      sb.append("null");
    } else {
      sb.append(this.group);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cron:");
    if (this.cron == null) {
      sb.append("null");
    } else {
      sb.append(this.cron);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scheduleTime:");
    sb.append(this.scheduleTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("triggerTime:");
    sb.append(this.triggerTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applicantId:");
    if (this.applicantId == null) {
      sb.append("null");
    } else {
      sb.append(this.applicantId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApplyExecuteJobFormStandardSchemeFactory implements SchemeFactory {
    public ApplyExecuteJobFormStandardScheme getScheme() {
      return new ApplyExecuteJobFormStandardScheme();
    }
  }

  private static class ApplyExecuteJobFormStandardScheme extends StandardScheme<ApplyExecuteJobForm> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApplyExecuteJobForm struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CRON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cron = iprot.readString();
              struct.setCronIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCHEDULE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scheduleTime = iprot.readI64();
              struct.setScheduleTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRIGGER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.triggerTime = iprot.readI64();
              struct.setTriggerTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APPLICANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicantId = iprot.readString();
              struct.setApplicantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApplyExecuteJobForm struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.group != null) {
        oprot.writeFieldBegin(GROUP_FIELD_DESC);
        oprot.writeString(struct.group);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.cron != null) {
        oprot.writeFieldBegin(CRON_FIELD_DESC);
        oprot.writeString(struct.cron);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCHEDULE_TIME_FIELD_DESC);
      oprot.writeI64(struct.scheduleTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRIGGER_TIME_FIELD_DESC);
      oprot.writeI64(struct.triggerTime);
      oprot.writeFieldEnd();
      if (struct.applicantId != null) {
        oprot.writeFieldBegin(APPLICANT_ID_FIELD_DESC);
        oprot.writeString(struct.applicantId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApplyExecuteJobFormTupleSchemeFactory implements SchemeFactory {
    public ApplyExecuteJobFormTupleScheme getScheme() {
      return new ApplyExecuteJobFormTupleScheme();
    }
  }

  private static class ApplyExecuteJobFormTupleScheme extends TupleScheme<ApplyExecuteJobForm> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApplyExecuteJobForm struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGroup()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetCron()) {
        optionals.set(2);
      }
      if (struct.isSetScheduleTime()) {
        optionals.set(3);
      }
      if (struct.isSetTriggerTime()) {
        optionals.set(4);
      }
      if (struct.isSetApplicantId()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCron()) {
        oprot.writeString(struct.cron);
      }
      if (struct.isSetScheduleTime()) {
        oprot.writeI64(struct.scheduleTime);
      }
      if (struct.isSetTriggerTime()) {
        oprot.writeI64(struct.triggerTime);
      }
      if (struct.isSetApplicantId()) {
        oprot.writeString(struct.applicantId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApplyExecuteJobForm struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cron = iprot.readString();
        struct.setCronIsSet(true);
      }
      if (incoming.get(3)) {
        struct.scheduleTime = iprot.readI64();
        struct.setScheduleTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.triggerTime = iprot.readI64();
        struct.setTriggerTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.applicantId = iprot.readString();
        struct.setApplicantIdIsSet(true);
      }
    }
  }

}

