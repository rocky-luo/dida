/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rocky.dida.common.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-3-8")
public class ExecuteResult implements org.apache.thrift.TBase<ExecuteResult, ExecuteResult._Fields>, java.io.Serializable, Cloneable, Comparable<ExecuteResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExecuteResult");

  private static final org.apache.thrift.protocol.TField JOB_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobInstanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACTUAL_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("actualStartTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ACTUAL_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("actualEndTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField RETURN_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("returnString", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExecuteResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExecuteResultTupleSchemeFactory());
  }

  public String jobInstanceId; // required
  public int code; // required
  public long actualStartTime; // required
  public long actualEndTime; // required
  public String returnString; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOB_INSTANCE_ID((short)1, "jobInstanceId"),
    CODE((short)2, "code"),
    ACTUAL_START_TIME((short)3, "actualStartTime"),
    ACTUAL_END_TIME((short)4, "actualEndTime"),
    RETURN_STRING((short)5, "returnString");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOB_INSTANCE_ID
          return JOB_INSTANCE_ID;
        case 2: // CODE
          return CODE;
        case 3: // ACTUAL_START_TIME
          return ACTUAL_START_TIME;
        case 4: // ACTUAL_END_TIME
          return ACTUAL_END_TIME;
        case 5: // RETURN_STRING
          return RETURN_STRING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CODE_ISSET_ID = 0;
  private static final int __ACTUALSTARTTIME_ISSET_ID = 1;
  private static final int __ACTUALENDTIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOB_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobInstanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTUAL_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("actualStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTUAL_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("actualEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RETURN_STRING, new org.apache.thrift.meta_data.FieldMetaData("returnString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExecuteResult.class, metaDataMap);
  }

  public ExecuteResult() {
  }

  public ExecuteResult(
    String jobInstanceId,
    int code,
    long actualStartTime,
    long actualEndTime,
    String returnString)
  {
    this();
    this.jobInstanceId = jobInstanceId;
    this.code = code;
    setCodeIsSet(true);
    this.actualStartTime = actualStartTime;
    setActualStartTimeIsSet(true);
    this.actualEndTime = actualEndTime;
    setActualEndTimeIsSet(true);
    this.returnString = returnString;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExecuteResult(ExecuteResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJobInstanceId()) {
      this.jobInstanceId = other.jobInstanceId;
    }
    this.code = other.code;
    this.actualStartTime = other.actualStartTime;
    this.actualEndTime = other.actualEndTime;
    if (other.isSetReturnString()) {
      this.returnString = other.returnString;
    }
  }

  public ExecuteResult deepCopy() {
    return new ExecuteResult(this);
  }

  @Override
  public void clear() {
    this.jobInstanceId = null;
    setCodeIsSet(false);
    this.code = 0;
    setActualStartTimeIsSet(false);
    this.actualStartTime = 0;
    setActualEndTimeIsSet(false);
    this.actualEndTime = 0;
    this.returnString = null;
  }

  public String getJobInstanceId() {
    return this.jobInstanceId;
  }

  public ExecuteResult setJobInstanceId(String jobInstanceId) {
    this.jobInstanceId = jobInstanceId;
    return this;
  }

  public void unsetJobInstanceId() {
    this.jobInstanceId = null;
  }

  /** Returns true if field jobInstanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobInstanceId() {
    return this.jobInstanceId != null;
  }

  public void setJobInstanceIdIsSet(boolean value) {
    if (!value) {
      this.jobInstanceId = null;
    }
  }

  public int getCode() {
    return this.code;
  }

  public ExecuteResult setCode(int code) {
    this.code = code;
    setCodeIsSet(true);
    return this;
  }

  public void unsetCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return EncodingUtils.testBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  public void setCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CODE_ISSET_ID, value);
  }

  public long getActualStartTime() {
    return this.actualStartTime;
  }

  public ExecuteResult setActualStartTime(long actualStartTime) {
    this.actualStartTime = actualStartTime;
    setActualStartTimeIsSet(true);
    return this;
  }

  public void unsetActualStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALSTARTTIME_ISSET_ID);
  }

  /** Returns true if field actualStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetActualStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALSTARTTIME_ISSET_ID);
  }

  public void setActualStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALSTARTTIME_ISSET_ID, value);
  }

  public long getActualEndTime() {
    return this.actualEndTime;
  }

  public ExecuteResult setActualEndTime(long actualEndTime) {
    this.actualEndTime = actualEndTime;
    setActualEndTimeIsSet(true);
    return this;
  }

  public void unsetActualEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALENDTIME_ISSET_ID);
  }

  /** Returns true if field actualEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetActualEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALENDTIME_ISSET_ID);
  }

  public void setActualEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALENDTIME_ISSET_ID, value);
  }

  public String getReturnString() {
    return this.returnString;
  }

  public ExecuteResult setReturnString(String returnString) {
    this.returnString = returnString;
    return this;
  }

  public void unsetReturnString() {
    this.returnString = null;
  }

  /** Returns true if field returnString is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnString() {
    return this.returnString != null;
  }

  public void setReturnStringIsSet(boolean value) {
    if (!value) {
      this.returnString = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JOB_INSTANCE_ID:
      if (value == null) {
        unsetJobInstanceId();
      } else {
        setJobInstanceId((String)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((Integer)value);
      }
      break;

    case ACTUAL_START_TIME:
      if (value == null) {
        unsetActualStartTime();
      } else {
        setActualStartTime((Long)value);
      }
      break;

    case ACTUAL_END_TIME:
      if (value == null) {
        unsetActualEndTime();
      } else {
        setActualEndTime((Long)value);
      }
      break;

    case RETURN_STRING:
      if (value == null) {
        unsetReturnString();
      } else {
        setReturnString((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JOB_INSTANCE_ID:
      return getJobInstanceId();

    case CODE:
      return Integer.valueOf(getCode());

    case ACTUAL_START_TIME:
      return Long.valueOf(getActualStartTime());

    case ACTUAL_END_TIME:
      return Long.valueOf(getActualEndTime());

    case RETURN_STRING:
      return getReturnString();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JOB_INSTANCE_ID:
      return isSetJobInstanceId();
    case CODE:
      return isSetCode();
    case ACTUAL_START_TIME:
      return isSetActualStartTime();
    case ACTUAL_END_TIME:
      return isSetActualEndTime();
    case RETURN_STRING:
      return isSetReturnString();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExecuteResult)
      return this.equals((ExecuteResult)that);
    return false;
  }

  public boolean equals(ExecuteResult that) {
    if (that == null)
      return false;

    boolean this_present_jobInstanceId = true && this.isSetJobInstanceId();
    boolean that_present_jobInstanceId = true && that.isSetJobInstanceId();
    if (this_present_jobInstanceId || that_present_jobInstanceId) {
      if (!(this_present_jobInstanceId && that_present_jobInstanceId))
        return false;
      if (!this.jobInstanceId.equals(that.jobInstanceId))
        return false;
    }

    boolean this_present_code = true;
    boolean that_present_code = true;
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (this.code != that.code)
        return false;
    }

    boolean this_present_actualStartTime = true;
    boolean that_present_actualStartTime = true;
    if (this_present_actualStartTime || that_present_actualStartTime) {
      if (!(this_present_actualStartTime && that_present_actualStartTime))
        return false;
      if (this.actualStartTime != that.actualStartTime)
        return false;
    }

    boolean this_present_actualEndTime = true;
    boolean that_present_actualEndTime = true;
    if (this_present_actualEndTime || that_present_actualEndTime) {
      if (!(this_present_actualEndTime && that_present_actualEndTime))
        return false;
      if (this.actualEndTime != that.actualEndTime)
        return false;
    }

    boolean this_present_returnString = true && this.isSetReturnString();
    boolean that_present_returnString = true && that.isSetReturnString();
    if (this_present_returnString || that_present_returnString) {
      if (!(this_present_returnString && that_present_returnString))
        return false;
      if (!this.returnString.equals(that.returnString))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_jobInstanceId = true && (isSetJobInstanceId());
    list.add(present_jobInstanceId);
    if (present_jobInstanceId)
      list.add(jobInstanceId);

    boolean present_code = true;
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_actualStartTime = true;
    list.add(present_actualStartTime);
    if (present_actualStartTime)
      list.add(actualStartTime);

    boolean present_actualEndTime = true;
    list.add(present_actualEndTime);
    if (present_actualEndTime)
      list.add(actualEndTime);

    boolean present_returnString = true && (isSetReturnString());
    list.add(present_returnString);
    if (present_returnString)
      list.add(returnString);

    return list.hashCode();
  }

  @Override
  public int compareTo(ExecuteResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetJobInstanceId()).compareTo(other.isSetJobInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobInstanceId, other.jobInstanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualStartTime()).compareTo(other.isSetActualStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualStartTime, other.actualStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualEndTime()).compareTo(other.isSetActualEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualEndTime, other.actualEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnString()).compareTo(other.isSetReturnString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnString, other.returnString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExecuteResult(");
    boolean first = true;

    sb.append("jobInstanceId:");
    if (this.jobInstanceId == null) {
      sb.append("null");
    } else {
      sb.append(this.jobInstanceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    sb.append(this.code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualStartTime:");
    sb.append(this.actualStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualEndTime:");
    sb.append(this.actualEndTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnString:");
    if (this.returnString == null) {
      sb.append("null");
    } else {
      sb.append(this.returnString);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExecuteResultStandardSchemeFactory implements SchemeFactory {
    public ExecuteResultStandardScheme getScheme() {
      return new ExecuteResultStandardScheme();
    }
  }

  private static class ExecuteResultStandardScheme extends StandardScheme<ExecuteResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExecuteResult struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOB_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobInstanceId = iprot.readString();
              struct.setJobInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.code = iprot.readI32();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTUAL_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.actualStartTime = iprot.readI64();
              struct.setActualStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTUAL_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.actualEndTime = iprot.readI64();
              struct.setActualEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RETURN_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.returnString = iprot.readString();
              struct.setReturnStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExecuteResult struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.jobInstanceId != null) {
        oprot.writeFieldBegin(JOB_INSTANCE_ID_FIELD_DESC);
        oprot.writeString(struct.jobInstanceId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CODE_FIELD_DESC);
      oprot.writeI32(struct.code);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_START_TIME_FIELD_DESC);
      oprot.writeI64(struct.actualStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_END_TIME_FIELD_DESC);
      oprot.writeI64(struct.actualEndTime);
      oprot.writeFieldEnd();
      if (struct.returnString != null) {
        oprot.writeFieldBegin(RETURN_STRING_FIELD_DESC);
        oprot.writeString(struct.returnString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExecuteResultTupleSchemeFactory implements SchemeFactory {
    public ExecuteResultTupleScheme getScheme() {
      return new ExecuteResultTupleScheme();
    }
  }

  private static class ExecuteResultTupleScheme extends TupleScheme<ExecuteResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExecuteResult struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetJobInstanceId()) {
        optionals.set(0);
      }
      if (struct.isSetCode()) {
        optionals.set(1);
      }
      if (struct.isSetActualStartTime()) {
        optionals.set(2);
      }
      if (struct.isSetActualEndTime()) {
        optionals.set(3);
      }
      if (struct.isSetReturnString()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetJobInstanceId()) {
        oprot.writeString(struct.jobInstanceId);
      }
      if (struct.isSetCode()) {
        oprot.writeI32(struct.code);
      }
      if (struct.isSetActualStartTime()) {
        oprot.writeI64(struct.actualStartTime);
      }
      if (struct.isSetActualEndTime()) {
        oprot.writeI64(struct.actualEndTime);
      }
      if (struct.isSetReturnString()) {
        oprot.writeString(struct.returnString);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExecuteResult struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.jobInstanceId = iprot.readString();
        struct.setJobInstanceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.code = iprot.readI32();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.actualStartTime = iprot.readI64();
        struct.setActualStartTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.actualEndTime = iprot.readI64();
        struct.setActualEndTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.returnString = iprot.readString();
        struct.setReturnStringIsSet(true);
      }
    }
  }

}

