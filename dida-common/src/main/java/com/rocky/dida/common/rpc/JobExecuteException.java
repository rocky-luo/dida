/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rocky.dida.common.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-3-8")
public class JobExecuteException extends TException implements org.apache.thrift.TBase<JobExecuteException, JobExecuteException._Fields>, java.io.Serializable, Cloneable, Comparable<JobExecuteException> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobExecuteException");

  private static final org.apache.thrift.protocol.TField ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMsg", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STACK_TRACE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("stackTraceString", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobExecuteExceptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JobExecuteExceptionTupleSchemeFactory());
  }

  public String errorMsg; // required
  public String stackTraceString; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ERROR_MSG((short)1, "errorMsg"),
    STACK_TRACE_STRING((short)2, "stackTraceString");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ERROR_MSG
          return ERROR_MSG;
        case 2: // STACK_TRACE_STRING
          return STACK_TRACE_STRING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errorMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STACK_TRACE_STRING, new org.apache.thrift.meta_data.FieldMetaData("stackTraceString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobExecuteException.class, metaDataMap);
  }

  public JobExecuteException() {
  }

  public JobExecuteException(
    String errorMsg,
    String stackTraceString)
  {
    this();
    this.errorMsg = errorMsg;
    this.stackTraceString = stackTraceString;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobExecuteException(JobExecuteException other) {
    if (other.isSetErrorMsg()) {
      this.errorMsg = other.errorMsg;
    }
    if (other.isSetStackTraceString()) {
      this.stackTraceString = other.stackTraceString;
    }
  }

  public JobExecuteException deepCopy() {
    return new JobExecuteException(this);
  }

  @Override
  public void clear() {
    this.errorMsg = null;
    this.stackTraceString = null;
  }

  public String getErrorMsg() {
    return this.errorMsg;
  }

  public JobExecuteException setErrorMsg(String errorMsg) {
    this.errorMsg = errorMsg;
    return this;
  }

  public void unsetErrorMsg() {
    this.errorMsg = null;
  }

  /** Returns true if field errorMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMsg() {
    return this.errorMsg != null;
  }

  public void setErrorMsgIsSet(boolean value) {
    if (!value) {
      this.errorMsg = null;
    }
  }

  public String getStackTraceString() {
    return this.stackTraceString;
  }

  public JobExecuteException setStackTraceString(String stackTraceString) {
    this.stackTraceString = stackTraceString;
    return this;
  }

  public void unsetStackTraceString() {
    this.stackTraceString = null;
  }

  /** Returns true if field stackTraceString is set (has been assigned a value) and false otherwise */
  public boolean isSetStackTraceString() {
    return this.stackTraceString != null;
  }

  public void setStackTraceStringIsSet(boolean value) {
    if (!value) {
      this.stackTraceString = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ERROR_MSG:
      if (value == null) {
        unsetErrorMsg();
      } else {
        setErrorMsg((String)value);
      }
      break;

    case STACK_TRACE_STRING:
      if (value == null) {
        unsetStackTraceString();
      } else {
        setStackTraceString((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ERROR_MSG:
      return getErrorMsg();

    case STACK_TRACE_STRING:
      return getStackTraceString();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ERROR_MSG:
      return isSetErrorMsg();
    case STACK_TRACE_STRING:
      return isSetStackTraceString();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobExecuteException)
      return this.equals((JobExecuteException)that);
    return false;
  }

  public boolean equals(JobExecuteException that) {
    if (that == null)
      return false;

    boolean this_present_errorMsg = true && this.isSetErrorMsg();
    boolean that_present_errorMsg = true && that.isSetErrorMsg();
    if (this_present_errorMsg || that_present_errorMsg) {
      if (!(this_present_errorMsg && that_present_errorMsg))
        return false;
      if (!this.errorMsg.equals(that.errorMsg))
        return false;
    }

    boolean this_present_stackTraceString = true && this.isSetStackTraceString();
    boolean that_present_stackTraceString = true && that.isSetStackTraceString();
    if (this_present_stackTraceString || that_present_stackTraceString) {
      if (!(this_present_stackTraceString && that_present_stackTraceString))
        return false;
      if (!this.stackTraceString.equals(that.stackTraceString))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_errorMsg = true && (isSetErrorMsg());
    list.add(present_errorMsg);
    if (present_errorMsg)
      list.add(errorMsg);

    boolean present_stackTraceString = true && (isSetStackTraceString());
    list.add(present_stackTraceString);
    if (present_stackTraceString)
      list.add(stackTraceString);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobExecuteException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetErrorMsg()).compareTo(other.isSetErrorMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMsg, other.errorMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStackTraceString()).compareTo(other.isSetStackTraceString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStackTraceString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stackTraceString, other.stackTraceString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobExecuteException(");
    boolean first = true;

    sb.append("errorMsg:");
    if (this.errorMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errorMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stackTraceString:");
    if (this.stackTraceString == null) {
      sb.append("null");
    } else {
      sb.append(this.stackTraceString);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobExecuteExceptionStandardSchemeFactory implements SchemeFactory {
    public JobExecuteExceptionStandardScheme getScheme() {
      return new JobExecuteExceptionStandardScheme();
    }
  }

  private static class JobExecuteExceptionStandardScheme extends StandardScheme<JobExecuteException> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobExecuteException struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ERROR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMsg = iprot.readString();
              struct.setErrorMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STACK_TRACE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stackTraceString = iprot.readString();
              struct.setStackTraceStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobExecuteException struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.errorMsg != null) {
        oprot.writeFieldBegin(ERROR_MSG_FIELD_DESC);
        oprot.writeString(struct.errorMsg);
        oprot.writeFieldEnd();
      }
      if (struct.stackTraceString != null) {
        oprot.writeFieldBegin(STACK_TRACE_STRING_FIELD_DESC);
        oprot.writeString(struct.stackTraceString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobExecuteExceptionTupleSchemeFactory implements SchemeFactory {
    public JobExecuteExceptionTupleScheme getScheme() {
      return new JobExecuteExceptionTupleScheme();
    }
  }

  private static class JobExecuteExceptionTupleScheme extends TupleScheme<JobExecuteException> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JobExecuteException struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetErrorMsg()) {
        optionals.set(0);
      }
      if (struct.isSetStackTraceString()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetErrorMsg()) {
        oprot.writeString(struct.errorMsg);
      }
      if (struct.isSetStackTraceString()) {
        oprot.writeString(struct.stackTraceString);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JobExecuteException struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.errorMsg = iprot.readString();
        struct.setErrorMsgIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stackTraceString = iprot.readString();
        struct.setStackTraceStringIsSet(true);
      }
    }
  }

}

